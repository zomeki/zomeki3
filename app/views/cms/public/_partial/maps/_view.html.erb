<%
map     = item.maps.first
markers = map ? map.markers : []
return unless map
return if map.map_lat.blank? || map.map_lng.blank?
%>
<%- if item.state != 'closed' -%>
<%= javascript_include_tag "https://maps.googleapis.com/maps/api/js?key=#{item.site.google_map_api_key}&region=jp&libraries=places" %>
<script type="text/javascript">
//<![CDATA[
function addEvent(element, listener, func) {
  try {
    element.addEventListener(listener, func, false);
  } catch (e) {
    element.attachEvent('on' + listener, func);
  }
}


function enableNavigation(map) {
  var targetTypes = JSON.parse($('#placeList').attr('data-json'));
  <%- if first_marker = markers.first -%>
  var direction = new google.maps.LatLng(<%= first_marker.lat.to_f %>, <%= first_marker.lng.to_f %>);
  <%- else -%>
  var direction = new google.maps.LatLng(<%= map.map_lat.to_f %>, <%= map.map_lng.to_f %>);
  <%- end -%>
  var directionsRenderer = new google.maps.DirectionsRenderer();

  for (var n = 0; n < targetTypes.length; n++) {
    var request = {
      fields: ['place_id', 'name', 'geometry'],
      location: direction,
      type: targetTypes[n],
      rankBy: google.maps.places.RankBy.DISTANCE
    };
    var service = new google.maps.places.PlacesService(map);
    service.nearbySearch(request, setOrigins);
  }

  $('#place').on('change', function(e) {
    var target = $(this).val();
    if (target == '') {
      google.maps.event.clearListeners(map, 'click');
      clearNavigation();
    } else if (target == 'click') {
      google.maps.event.addListener(map, 'click', function(e) {
        setNavigation(e.latLng, direction);
      });
    } else if (target == 'current_position') {
      google.maps.event.clearListeners(map, 'click');
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var origin = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
          setNavigation(origin, direction);
        }, function(error) {
          switch (error.code) {
            case 1:
              alert('位置情報の利用が許可されていません');
              break;
            case 2:
              alert('現在位置が取得できませんでした');
              break;
            case 3:
              alert('タイムアウトしました');
              break;
            default:
              alert('Error(code:' + error.code + ')');
              break;
          }
        });
      }
    } else {
      google.maps.event.clearListeners(map, 'click');
      var position = target.split(/,/);
      var origin = new google.maps.LatLng(position[0], position[1]);
      setNavigation(origin, direction);
    }
  });

  function clearNavigation() {
    if (directionsRenderer != null) {
      directionsRenderer.setMap(null);
    }
  }

  function setOrigins(results, status) {
    if (status == google.maps.places.PlacesServiceStatus.OK) {
      var target = $('#place');
      for (var i = 0; i < results.length; i++) {
        var place = results[i];
        if (!($('[data-place-id="' + place.place_id + '"]').size())) {
          var location = place.geometry.location.lat() + ',' + place.geometry.location.lng();
          var opt = $('<option>').val(location).text(place.name).attr('data-place-id', place.place_id);
          target.append(opt);
        }
      }
    }
  }

  function setNavigation(origin, direction) {
    clearNavigation();
    var directionsService = new google.maps.DirectionsService();
    directionsService.route({
      origin: origin,
      destination: direction,
      travelMode: google.maps.TravelMode.DRIVING
    }, function(response, status) {
      if (status === google.maps.DirectionsStatus.OK) {
        directionsRenderer.setMap(map);
        directionsRenderer.setDirections(response);
      }
    });
  }
}


addEvent(window, 'load', function() {
  var mapOptions = {
    center: new google.maps.LatLng(<%= map.map_lat.to_f %>, <%= map.map_lng.to_f %>),
    zoom: <%= map.map_zoom.to_i %>,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    scaleControl: true,
    scrollwheel: false
  };
  var map = new google.maps.Map(document.getElementById("map1"), mapOptions);

  <% markers.each_with_index do |marker, idx| %>
    var marker<%= idx %> = new google.maps.Marker({
      position: new google.maps.LatLng(<%= marker.lat.to_f %>, <%= marker.lng.to_f %>),
      map: map
    });

    <%- if item.content.respond_to?(:map_content_marker) && (map_content = item.content.map_content_marker) -%>
    marker<%= idx %>.setIcon('<%==j map_content.icon_image(item.marker_icon_category || item.marker_categories.first) %>');
    <%- end -%>

    var infowindow<%= idx %> = new google.maps.InfoWindow({
      content: '<%==j marker.name.gsub(/\r\n|\r|\n/, "<br />") %>',
      disableAutoPan: false
    });
    google.maps.event.addListener(marker<%= idx %>, 'click', function() {
      infowindow<%= idx %>.open(map, marker<%= idx %>);
    });
  <% end %>
  <%- if item.content.try(:navigation_enabled?) && item.navigation_state_enabled? -%>
  enableNavigation(map);
  <% end %>
});

//]]>
</script>
<%- end -%>
<div class="maps">
  <h2>地図</h2>
  <% if !map.title.blank? %><h3><%= map.title %></h3><% end %>
  <%- if item.content.try(:navigation_enabled?) && item.navigation_state_enabled? -%>
    <div id="placeList" data-json="<%= item.content.navigation_target_types.to_json %>">
      <%= select_tag "place", options_for_select([['地図をクリック', 'click'], ['現在地', 'current_position']], nil),
                     id: 'place', class: 'placeSelect', include_blank: true %>
    </div>
  <%- end -%>
  <div id="map1" class="map" style="width: 100%; height: 400px">
  <%- if item.state == 'closed' -%>
    <div style="width: 100%; display: table;">
      <div style="height: 400px; display: table-cell; background-color: #dcdcdc; text-align: center; vertical-align: middle;">
        <span>公開終了状態のため地図は表示されません</span>
      </div>
    </div>
  <%- end -%>
  </div>
</div>